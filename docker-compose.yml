version: '3.5'

networks:
  prefect:
    name: prefect

services:
  # --------------------------------------#
  #          Postgres for Prefect         #
  # --------------------------------------#
  prefectdb:
    image: postgres:15.1-alpine
    command:
      - postgres
      - -c
      - max_connections=150
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orion
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 2s
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER} | grep "accepting connections" || exit 1
      timeout: 2s
    expose:
    - 5432
    restart: always
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    networks:
      - prefect
  # --------------------------------------#
  #             Prefect Server            #
  # --------------------------------------#
  orion:
    image: prefect-orion:2.7.10
    command:
      - prefect
      - orion
      - start
    ports:
      - 4200:4200
    depends_on:
      prefectdb:
        condition: service_started
    volumes:
      - ${PWD}/volumes/prefect:/root/.prefect
      - ${PWD}/flows:/flows
    environment:
      - PREFECT_ORION_API_HOST=0.0.0.0
      - PREFECT_ORION_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgres@prefectdb:5432/orion
      - PREFECT_LOGGING_SERVER_LEVEL=WARNING
      - PREFECT_API_URL= http://orion:4200/api    
    networks:
      - prefect
  # --------------------------------------#
  #             Prefect Agent              #
  # --------------------------------------#
  prefect-agent:
    image: prefect-orion:2.7.10
    entrypoint: ["prefect", "agent", "start", "-q", "default"]
    depends_on:
      orion:
        condition: service_started
    environment:
      - PREFECT_API_URL=http://orion:4200/api
      - PREFECT_LOGGING_LEVEL=DEBUG
      - DOCKER_HOST=unix://var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - prefect

  # --------------------------------------#
  #         Minio for storage             #
  # --------------------------------------#
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=einstein
      - MINIO_ROOT_PASSWORD=einsteinSalchichon#20231
    volumes:
      - ./volumes/minio:/data
    entrypoint: /bin/bash 
    command: "-c 'mkdir -p /data/prefect-flows && sleep 5 && minio server --console-address :9001 /data'"
    ports:
      - published: 9000
        target: 9000
      - published: 9001
        target: 9001
    networks:
      - prefect

  # --------------------------------------#
  #         dbt            #
  # --------------------------------------#
  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: dbt
    image: dbt
    environment:
      SF_ACCOUNT: ${SF_ACCOUNT}
      SF_USER: ${SF_USER}
      SF_PASSWORD: ${SF_PASSWORD}
      SF_DATABASE: ${SF_DATABASE}
      SF_ROLE: ${SF_ROLE}
      SF_SCHEMA: ${SF_SCHEMA}
      SF_WAREHOUSE: ${SF_WAREHOUSE}
      SF_THREADS: ${SF_THREADS}
    ports:
      - 8580:8580
    networks:
      - docker_example_network